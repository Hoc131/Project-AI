-Thư viện cần tải
!pip install ultralytics tensorflow gradio opencv-python
!pip install gradio

-CODE DỰ ĐOÁN
import gradio as gr
import cv2
import numpy as np
from ultralytics import YOLO
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import img_to_array
from PIL import Image

yolo_model = YOLO("/content/drive/MyDrive/yolov8n.pt")

# Keras .h5 để phân loại món ăn
classifier_model = load_model("/content/drive/MyDrive/cantin_model.h5")

# Danh sách nhãn tương ứng với mô hình classifier
class_labels = [
    "Ca hu kho", "Canh cai", "Canh chua", "Com trang", "Dau hu sot ca",
    "Ga chien", "Rau muong xao", "Thit kho", "Thit kho trung", "Trung chien"
]

# Bảng giá món ăn
food_prices = {
    "Ca hu kho": 10000,
    "Canh cai": 8000,
    "Canh chua": 8000,
    "Com trang": 5000,
    "Dau hu sot ca": 7000,
    "Ga chien": 12000,
    "Rau muong xao": 6000,
    "Thit kho": 12000,
    "Thit kho trung": 14000,
    "Trung chien": 7000
}

def preprocess_crop(crop_img):
    img = cv2.resize(crop_img, (128, 128))
    img = img.astype("float32") / 255.0
    img = np.expand_dims(img, axis=0)
    return img

def detect_and_classify(image):
    results = yolo_model(image)
    detections = results[0].boxes.data.cpu().numpy()

    predicted_classes = []
    total_price = 0

    for det in detections:
        x1, y1, x2, y2, score, class_id = det
        if score < 0.3:
            continue

        crop = image[int(y1):int(y2), int(x1):int(x2)]
        if crop.size == 0:
            continue

        # Tiền xử lý và phân loại bằng CNN
        input_img = preprocess_crop(crop)
        preds = classifier_model.predict(input_img)
        predicted_index = np.argmax(preds[0])
        predicted_label = class_labels[predicted_index]

        predicted_classes.append(predicted_label)
        total_price += food_prices.get(predicted_label, 0)

    if not predicted_classes:
        return image, "<span style='color:red'>Không phát hiện được món ăn!</span>", "0 đ"

    result_html = "".join([
        f"<li>{label}: {food_prices[label]:,} đ</li>" for label in predicted_classes
    ])
    return image, f"<ul>{result_html}</ul>", f"{total_price:,} đ"

# === Giao diện Gradio ===
header = """
<div style="text-align:center; padding: 20px;">
    <h1 style="color:#2E8B57">🍱 Nhận Diện Món Ăn & Tính Tiền</h1>
    <p>Tải ảnh mâm cơm lên để phát hiện và tính giá các món ăn</p>
</div>
"""

with gr.Blocks(theme=gr.themes.Soft()) as demo:
    gr.HTML(header)
    with gr.Row():
        with gr.Column():
            image_input = gr.Image(type="numpy", label="📷 Ảnh mâm cơm")
            btn = gr.Button("🔍 Nhận diện & tính tiền")
        with gr.Column():
            image_output = gr.Image(type="numpy", label="Ảnh kết quả")
            food_list = gr.HTML(label="🍽️ Danh sách món ăn")
            total_cost = gr.Textbox(label="💰 Tổng tiền")

    btn.click(fn=detect_and_classify, inputs=image_input, outputs=[image_output, food_list, total_cost])
# Chạy ứng dụng
demo.launch()
