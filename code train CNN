-Thư viện cần tải: 
pip install tensorflow
pip install numpy
pip install opencv-python
pip install ipython
-Code train
import cv2
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import Adam
from pathlib import Path

# Cấu hình đường dẫn cho Kaggle
base_dir = Path('/kaggle/input/traincnn/AI THINH_augmented')  # ← bạn cần upload dataset vào thư mục này hoặc zip & giải nén tại đây
model_path = '/kaggle/working/cantin_model.h5'

# Tạo ImageDataGenerator
datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=10,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    vertical_flip=True,
    brightness_range=[0.6, 1.4],
    fill_mode='nearest',
    validation_split=0.2
)

batch_size = 64

# Tải dữ liệu train/validation
train_data = datagen.flow_from_directory(
    base_dir,
    target_size=(128, 128),
    class_mode='categorical',
    subset='training',
    batch_size=batch_size
)

val_data = datagen.flow_from_directory(
    base_dir,
    target_size=(128, 128),
    class_mode='categorical',
    subset='validation',
    batch_size=batch_size
)

# Khởi tạo model CNN
model = Sequential([
    Conv2D(128, (3, 3), activation='relu', input_shape=(128, 128, 3)),
    BatchNormalization(),
    MaxPooling2D((2, 2)),
    Dropout(0.3),

    Conv2D(256, (3, 3), activation='relu'),
    BatchNormalization(),
    MaxPooling2D((2, 2)),
    Dropout(0.3),

    Conv2D(512, (3, 3), activation='relu'),
    BatchNormalization(),
    MaxPooling2D((2, 2)),
    Dropout(0.4),

    Flatten(),
    Dense(512, activation='relu'),
    BatchNormalization(),
    Dropout(0.5),

    Dense(10, activation='softmax')
])

model.compile(optimizer=Adam(learning_rate=0.0003),
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Huấn luyện mô hình
model.fit(train_data, validation_data=val_data, epochs=100, batch_size=batch_size)

# Lưu mô hình
model.save(model_path)

from IPython.display import FileLink
FileLink(model_path)
